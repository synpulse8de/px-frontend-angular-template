import { Component, OnInit } from '@angular/core'
import { Store } from '@ngrx/store'
import { MockData } from '../../../../shared/models/mock-data.model'
import { Observable, of } from 'rxjs'
import { FormControl, FormGroup, Validators } from '@angular/forms'
import { selectEntries, selectSelectedEntries } from '../../+store/selectors/example-feature-1.selectors'
import {
  addDataEntryActions,
  addSelection,
  loadMockDataEntriesActions,
  removeSelectedEntries,
  removeSelection,
  resetSelectedEntries,
} from '../../+store/actions/example-feature-1.actions'
import {
  selectChangeUserDataLoadingState,
  selectInitLoadingState,
} from '../../+store/selectors/example-feature-1-loading.selectors'

@Component({
  selector: 'app-my-customers',
  templateUrl: './my-customers.component.html',
  styleUrls: ['./my-customers.component.scss'],
  standalone: false,
})
export class MyCustomersComponent implements OnInit {
  constructor(private store: Store) {
  }
  
  protected entries: MockData[] | undefined = undefined
  protected initLoadingState$: Observable<boolean> = of(false)
  protected userDataLoadingState$: Observable<boolean> = of(false)
  
  skeletonPlaceholders: any[] = Array(5).fill({}) // Number of placeholders
  newPersonFormGroup: FormGroup = new FormGroup({})
  
  private selectedEntries$ = this.store.select(selectSelectedEntries)
  
  ngOnInit(): void {
    this.newPersonFormGroup = this.initFormGroup()
    
    this.store.select(selectEntries).subscribe((entries: MockData[]) => {
      if (entries?.length) {
        this.entries = entries
      } else {
        this.store.dispatch(loadMockDataEntriesActions.loadMockDataEntries())
      }
    })
    this.initLoadingState$ = this.store.select(selectInitLoadingState)
    this.userDataLoadingState$ = this.store.select(
        selectChangeUserDataLoadingState,
    )
  }
  
  /**
   * Just for testing purposes, in a real scenario this will be generated by the backend
   * @param length
   */
  public generateRandomHex(length: number): string {
    const characters: string = '0123456789abcdef'
    let result = ''
    
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length)
      result += characters.charAt(randomIndex)
    }
    
    return result
  }
  
  public addCustomer(): void {
    const newUser: MockData = this.initialiseNewUser()
    this.store.dispatch(
        addDataEntryActions.addDataEntry({ mockDataEntry: newUser }),
    )
    this.newPersonFormGroup.reset()
  }
  
  private initialiseNewUser() {
    const randomHexValue: string = this.generateRandomHex(24)
    const newUser: MockData = {
      id: randomHexValue,
      name: this.newPersonFormGroup.get('name')?.value,
      age: this.newPersonFormGroup.get('age')?.value,
      email: this.newPersonFormGroup.get('email')?.value,
    }
    
    return newUser
  }
  
  private initFormGroup() {
    return new FormGroup({
      id: new FormControl({ value: '', disabled: true }),
      name: new FormControl('', Validators.required),
      age: new FormControl('', Validators.required),
      email: new FormControl('', Validators.required),
    })
  }
  
  selectionToggle(entry: MockData, $event: MouseEvent) {
    const checked = ($event.target as HTMLInputElement).checked
    if (checked) {
      this.store.dispatch(addSelection({ entryId: entry.id }))
    } else {
      this.store.dispatch(removeSelection({ entryId: entry.id }))
    }
  }
  
  hasSelection() {
    return this.selectedEntries$
  }
  
  removeCustomers() {
    this.store.dispatch(removeSelectedEntries())
    this.store.dispatch(resetSelectedEntries())
  }
}
