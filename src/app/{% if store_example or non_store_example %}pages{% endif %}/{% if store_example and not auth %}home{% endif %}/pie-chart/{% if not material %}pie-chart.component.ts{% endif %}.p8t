import { AfterViewInit, Component, OnInit } from '@angular/core'
import { FormControl, FormGroup } from '@angular/forms'
import { debounceTime } from 'rxjs'
import { Store } from '@ngrx/store'
import { changePieChartValue } from '../../../shared/+store/actions/shared-feature.actions'
import { selectPieChartValue } from '../../../shared/+store/selectors/shared-feature.selectors'

@Component({
  selector: 'app-pie-chart',
  templateUrl: './pie-chart.component.html',
  styleUrls: ['./pie-chart.component.scss'],
  standalone: false,
})
export class PieChartComponent implements OnInit, AfterViewInit {
  protected percentageVariable$ = this.store.select(selectPieChartValue) // Set the default percentage
  protected colorVariable: string = 'orange' // Set the default color

  public pieFormGroup!: FormGroup

  constructor(private store: Store) {
  }

  ngOnInit(): void {
    this.pieFormGroup = this.initFormGroup()
    this.percentageVariable$.subscribe(
      (inputValue) =>
        this.pieFormGroup.get('percentageInput')?.setValue(inputValue),
    )
  }

  private initFormGroup() {
    return new FormGroup({
      percentageInput: new FormControl(),
    })
  }

  private setFormGroupListeners() {
    this.pieFormGroup
      .get('percentageInput')
      ?.valueChanges.pipe(debounceTime(100))
      .subscribe((inputValue) => {
        const inputNumber = Number(inputValue)
        if (inputNumber && inputNumber <= 100 && inputNumber >= 0) {
          this.store.dispatch(
            changePieChartValue({ pieChartValue: inputNumber }),
          )
        } else {
          changePieChartValue({ pieChartValue: 0 })
        }
      })
  }

  ngAfterViewInit(): void {
    this.setFormGroupListeners()
  }
}
