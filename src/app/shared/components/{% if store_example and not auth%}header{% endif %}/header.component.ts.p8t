import { Component, OnInit } from '@angular/core'
{% if material -%}
import { MatToolbar } from '@angular/material/toolbar'
import { MatButton } from '@angular/material/button'
import { RouterLink } from '@angular/router'
import { MatSlideToggle, MatSlideToggleChange } from '@angular/material/slide-toggle'
import { OverlayContainer } from '@angular/cdk/overlay'
{%- endif %}

@Component({
  selector: 'app-header',
  {% if material -%}
  imports: [
    MatToolbar,
    RouterLink,
    MatButton,
    MatSlideToggle,
  ],
  {%- endif %}
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss'],
  standalone: {%- if material -%}true{%- endif -%}{%- if not material -%}false{%- endif -%},
})
export class HeaderComponent implements OnInit {
  {%- if material -%}
  isDark = false
  private darkClass = 'dark-theme'
  private lightClass = 'light-theme'
  private mediaQueryList = window.matchMedia('(prefers-color-scheme: dark)')
  {%- endif %}

  constructor({%- if material -%}private overlay: OverlayContainer{%- endif -%}) {
  }

  ngOnInit(): void {
    {%- if material -%}
    const saved = localStorage.getItem('darkMode')
    if (saved !== null) {
      this.isDark = saved === 'true'
    } else {
      this.isDark = this.mediaQueryList.matches
    }

    this.setDarkMode(this.isDark)

    this.mediaQueryList.addEventListener('change', e => {
      if (localStorage.getItem('darkMode') === null) {
        this.isDark = e.matches
        this.setDarkMode(this.isDark)
      }
    })
    {%- endif %}
  }
  {%- if material -%}
  sliderChange($event: MatSlideToggleChange) {
    this.isDark = $event.checked
    this.setDarkMode(this.isDark)
    localStorage.setItem('darkMode', String(this.isDark))
  }

  private setDarkMode(shouldBeDark: boolean) {
    const root = document.documentElement
    if (shouldBeDark) {
      root.classList.add(this.darkClass)
      this.overlay.getContainerElement().classList.add(this.darkClass)
      root.classList.remove(this.lightClass)
      this.overlay.getContainerElement().classList.remove(this.lightClass)
    } else {
      root.classList.add(this.lightClass)
      this.overlay.getContainerElement().classList.add(this.lightClass)
      root.classList.remove(this.darkClass)
      this.overlay.getContainerElement().classList.remove(this.darkClass)
    }
  }
  {%- endif %}
}
