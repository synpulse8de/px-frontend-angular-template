import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing'
import { HeaderComponent } from './header.component'
import { KeycloakService } from 'keycloak-angular'
import { LoginService } from '../../services/login.service'
import { provideRouter } from '@angular/router'
import { NoopAnimationsModule } from '@angular/platform-browser/animations'
import { MatMenuHarness } from '@angular/material/menu/testing'
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed'
import { HarnessLoader } from '@angular/cdk/testing'

class MockKeycloakService {
  authenticated = false

  getKeycloakInstance() {
    return {
      authenticated: this.authenticated,
      loadUserProfile: () => new Promise(resolve => resolve({ firstName: 'John', lastName: 'Doe' })),
      logout: () => {
      },
    }
  }
}

class MockLoginService {
  login() {
  }
}

describe('HeaderComponent', () => {
  let component: HeaderComponent
  let fixture: ComponentFixture<HeaderComponent>
  let loader: HarnessLoader
  let keycloakService: MockKeycloakService

  beforeEach(() => {
    // 1) create your spy with all methods your app uses
    const kcSpy = jasmine.createSpyObj('KeycloakService', [
      'isLoggedIn',
      'getKeycloakInstance',
      'login',
      'logout',
    ]);

    (kcSpy.isLoggedIn as any).and.callFake(() => kcSpy['authenticated'])

    kcSpy.getKeycloakInstance.and.callFake(() => ({
      authenticated: kcSpy['authenticated'],
      loadUserProfile: () => Promise.resolve({ firstName: 'John', lastName: 'Doe' }),
      logout: () => {
      },
    }))


    TestBed.configureTestingModule({
      imports: [HeaderComponent, NoopAnimationsModule],
      declarations: [],
      providers: [
        { provide: KeycloakService, useValue: kcSpy },
        { provide: LoginService, useClass: MockLoginService },
        provideRouter([]),
      ],
    }).compileComponents()

    fixture = TestBed.createComponent(HeaderComponent)
    loader  = TestbedHarnessEnvironment.loader(fixture);

    component = fixture.componentInstance

    keycloakService = TestBed.inject(KeycloakService) as unknown as MockKeycloakService

    fixture.detectChanges()
  })

  it('should create', () => {
    expect(component).toBeTruthy()
  })

  describe('user authentication', () => {
    it('should show the login button when user is not authenticated', () => {
      keycloakService.authenticated = false
      fixture.detectChanges()

      const signInButton = fixture.nativeElement.querySelector('[data-cy="login-button"] > .mdc-button__label')
      expect(signInButton).toBeTruthy()
      expect(signInButton.textContent).toContain('Sign in')
    })

    it('should show the logout button and username when user is authenticated', fakeAsync(async () => {
      keycloakService.authenticated = true
      component.ngOnInit()
      tick()
      fixture.detectChanges()

      const greetingText = fixture.nativeElement.querySelector('[data-cy="greeting"]')

      expect(greetingText).toBeTruthy()
      expect(greetingText.textContent).toContain('Hi John Doe !')

      const menu = await loader.getHarness(
        MatMenuHarness
      );
      expect(await menu.isOpen()).toBe(false);
      await menu.open();
      expect(await menu.isOpen()).toBe(true);

      const items = await menu.getItems();
      const labels = await Promise.all(items.map(i => i.getText()));

      expect(labels).toContain('Sign out');
    }))
  })
})
