import { Component, OnInit } from '@angular/core'
import { MockData } from '../../../../shared/models/mock-data.model'
import { ExampleModule1Service } from '../../services/example-module-1.service'
import { FormControl, FormGroup, {% if material -%}FormsModule, ReactiveFormsModule,{%- endif %} Validators } from '@angular/forms'
{% if material -%}
import { NgClass, NgIf } from '@angular/common'
import { MatCard, MatCardContent, MatCardHeader } from '@angular/material/card'
import { MatFormField, MatInput, MatLabel } from '@angular/material/input'
import {
  MatCell,
  MatCellDef,
  MatColumnDef,
  MatHeaderCell,
  MatHeaderCellDef,
  MatHeaderRow,
  MatHeaderRowDef,
  MatRow,
  MatRowDef,
  MatTable,
} from '@angular/material/table'
import { MatCheckbox, MatCheckboxChange } from '@angular/material/checkbox'
import { MatButton } from '@angular/material/button'
import { MatProgressSpinner } from '@angular/material/progress-spinner'
{%- endif %}

@Component({
  selector: 'app-my-customers',
  {% if material -%}
  imports: [
      FormsModule,
      ReactiveFormsModule,
      MatCard,
      MatCardHeader,
      MatCardContent,
      MatFormField,
      MatInput,
      MatLabel,
      MatTable,
      MatColumnDef,
      MatHeaderCell,
      MatHeaderCellDef,
      MatCell,
      MatCellDef,
      MatHeaderRowDef,
      MatHeaderRow,
      MatRowDef,
      MatRow,
      MatCheckbox,
      MatButton,
      NgIf,
      MatProgressSpinner,
      NgClass,
  ],
  {%- endif %}
  templateUrl: './my-customers.component.html',
  styleUrls: ['./my-customers.component.scss'],
  standalone: {% if material -%}true{%- endif -%}{%- if not material -%}false{%- endif -%},
})
export class MyCustomersComponent implements OnInit {
  {% if material -%}
  displayedColumns: string[] = ['select', 'ID', 'name', 'age', 'email']
  skeletonRows = Array.from({ length: 5 })
  {%- endif%}

 constructor(private exampleModule1Service: ExampleModule1Service) {
  }

  protected entries: MockData[] = []
  protected initLoadingState: boolean = false
  protected userDataLoadingState: boolean = false

  skeletonPlaceholders: any[] = Array(5).fill({}) // Number of placeholders
  newPersonFormGroup: FormGroup = new FormGroup({})

  private selectedEntries: MockData[] = []

  ngOnInit(): void {
    this.newPersonFormGroup = this.initFormGroup()

    this.initLoadingState = true
    this.exampleModule1Service
      .loadMockData()
      .then((entries) => {
        this.entries = entries
      })
      .catch(() => {
        console.log('There was an error while loading the mock data')
      })
      .finally(() => {
        this.initLoadingState = false
      })
  }

  /**
   * Just for testing purposes, in a real scenario this will be generated by the backend
   * @param length
   */
  public generateRandomHex(length: number): string {
    const characters: string = '0123456789abcdef'
    let result = ''

    for (let i = 0; i < length; i++) {
      const array = new Uint32Array(1)
      crypto.getRandomValues(array)
      const randomIndex = array[0] % characters.length
      result += characters.charAt(randomIndex)
    }

    return result
  }

  public addCustomer(): void {
    const newUser: MockData = this.initialiseNewUser()
    this.userDataLoadingState = true
    this.exampleModule1Service
      .addUser2(newUser)
      .then((newEntry) => {
        this.entries = [...(this.entries || []), newEntry];
      })
      .finally(() => (this.userDataLoadingState = false))
    this.newPersonFormGroup.reset()
  }

  private initialiseNewUser() {
    const randomHexValue: string = this.generateRandomHex(24)
    const newUser: MockData = {
      id: randomHexValue,
      name: this.newPersonFormGroup.get('name')?.value,
      age: this.newPersonFormGroup.get('age')?.value,
      email: this.newPersonFormGroup.get('email')?.value,
    }

    return newUser
  }

  private initFormGroup() {
    return new FormGroup({
      id: new FormControl({ value: '', disabled: true }),
      name: new FormControl('', Validators.required),
      age: new FormControl('', Validators.required),
      email: new FormControl('', Validators.required),
    })
  }

  selectionToggle(entry: MatCheckboxChange, row: any) {
    const checked = entry.checked
    if (checked) {
      this.selectedEntries.push(row)
    } else {
      this.selectedEntries = this.selectedEntries.filter(
        (entry) => entry.id !== row.id,
      )
    }
  }

  hasSelection(): boolean {
    return this.selectedEntries?.length !== 0
  }

  removeCustomers() {
    if (this.entries) {
      this.entries = this.entries.filter(
        (el) => !this.selectedEntries.includes(el),
      )
      this.selectedEntries = []
    }
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selectedEntries.length
    const numRows = this.entries.length
    return numSelected > 0 && numRows > 0 && numSelected === numRows
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  async toggleAllRows() {
    const allSelected = this.isAllSelected()

    allSelected ? this.resetSelectedEntries() : this.addMissingToSelection()
  }

  isSelected(row: MockData) {
    if (!!row) {
      return this.selectedEntries.some(mockData => mockData.id === row.id)
    }
    return false
  }

  private resetSelectedEntries() {
    this.selectedEntries = []
  }

  private addMissingToSelection() {
    this.selectedEntries = []
    this.entries.map((entry) => this.selectedEntries.push(entry))
  }
}
