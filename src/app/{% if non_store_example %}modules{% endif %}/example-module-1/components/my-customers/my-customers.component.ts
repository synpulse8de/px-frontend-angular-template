import { Component, OnInit } from '@angular/core'
import { MockData } from '../../../../shared/models/mock-data.model'
import { FormControl, FormGroup, Validators } from '@angular/forms'
import { ExampleModule1Service } from '../../services/example-module-1.service'

@Component({
  selector: 'app-my-customers',
  templateUrl: './my-customers.component.html',
  styleUrls: ['./my-customers.component.scss'],
})
export class MyCustomersComponent implements OnInit {
  constructor(private exampleModule1Service: ExampleModule1Service) {}

  protected entries: MockData[] | undefined = undefined
  protected initLoadingState: boolean = false
  protected userDataLoadingState: boolean = false

  skeletonPlaceholders: any[] = Array(5).fill({}) // Number of placeholders
  newPersonFormGroup: FormGroup = new FormGroup({})

  private selectedEntries: MockData[] = []

  ngOnInit(): void {
    this.newPersonFormGroup = this.initFormGroup()

    this.initLoadingState = true
    this.exampleModule1Service
      .loadMockData()
      .then((entries) => {
        this.entries = entries
      })
      .catch(() => {
        console.log('There was an error while loading the mock data')
      })
      .finally(() => {
        this.initLoadingState = false
      })
  }

  /**
   * Just for testing purposes, in a real scenario this will be generated by the backend
   * @param length
   */
  public generateRandomHex(length: number): string {
    const characters: string = '0123456789abcdef'
    let result = ''

    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length)
      result += characters.charAt(randomIndex)
    }

    return result
  }

  public addCustomer(): void {
    const newUser: MockData = this.initialiseNewUser()
    this.userDataLoadingState = true
    this.exampleModule1Service
      .addUser2(newUser)
      .then((newEntry) => {
        this.entries?.push(newEntry)
      })
      .finally(() => (this.userDataLoadingState = false))
    this.newPersonFormGroup.reset()
  }

  private initialiseNewUser() {
    const randomHexValue: string = this.generateRandomHex(24)
    const newUser: MockData = {
      id: randomHexValue,
      name: this.newPersonFormGroup.get('name')?.value,
      age: this.newPersonFormGroup.get('age')?.value,
      email: this.newPersonFormGroup.get('email')?.value,
    }

    return newUser
  }

  private initFormGroup() {
    return new FormGroup({
      id: new FormControl({ value: '', disabled: true }),
      name: new FormControl('', Validators.required),
      age: new FormControl('', Validators.required),
      email: new FormControl('', Validators.required),
    })
  }

  selectionToggle(selectionEntry: MockData, $event: MouseEvent) {
    const checked = ($event.target as HTMLInputElement).checked
    if (checked) {
      this.selectedEntries.push(selectionEntry)
    } else {
      this.selectedEntries = this.selectedEntries.filter(
        (entry) => entry.id !== entry.id
      )
    }
  }

  hasSelection(): boolean {
    return this.selectedEntries?.length !== 0
  }

  removeCustomers() {
    if (this.entries) {
      this.entries = this.entries.filter(
        (el) => !this.selectedEntries.includes(el)
      )
      this.selectedEntries = []
    }
  }
}
